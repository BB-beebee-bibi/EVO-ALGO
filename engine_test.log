============================= test session starts ==============================
platform darwin -- Python 3.9.6, pytest-8.3.5, pluggy-1.6.0
rootdir: /Users/rap_charles/Desktop/trisolaris-nerdout/EVO-ALGO
collected 15 items

tests/test_crossover_integrity.py FF..                                   [ 26%]
tests/test_mutation_integrity.py .FFF.F.                                 [ 73%]
tests/test_validate_ast.py ....                                          [100%]

=================================== FAILURES ===================================
_____________________________ test_crossover_basic _____________________________

    def test_crossover_basic():
        """Test basic crossover functionality with two parent programs."""
        p1 = ProgramAST()
        p2 = ProgramAST()
    
        c1, c2 = ProgramAST.crossover(p1, p2)
    
        # Validate ASTs
        assert validate_ast(c1.ast_tree)[0], "Child 1 has invalid AST"
        assert validate_ast(c2.ast_tree)[0], "Child 2 has invalid AST"
    
        # Check for uniqueness
>       assert ast.dump(c1.ast_tree) != ast.dump(p1.ast_tree), "Child 1 identical to parent 1"
E       AssertionError: Child 1 identical to parent 1
E       assert "Module(body=[Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), FunctionDef(name='sort_files', args=...))])], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], type_ignores=[])" != "Module(body=[Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), FunctionDef(name='sort_files', args=...))])], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], type_ignores=[])"
E        +  where "Module(body=[Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), FunctionDef(name='sort_files', args=...))])], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], type_ignores=[])" = <function dump at 0x105076430>(<ast.Module object at 0x105f84310>)
E        +    where <function dump at 0x105076430> = ast.dump
E        +    and   <ast.Module object at 0x105f84310> = <trisolaris.core.program_representation.ProgramAST object at 0x105f841c0>.ast_tree
E        +  and   "Module(body=[Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), FunctionDef(name='sort_files', args=...))])], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], type_ignores=[])" = <function dump at 0x105076430>(<ast.Module object at 0x105fb8c40>)
E        +    where <function dump at 0x105076430> = ast.dump
E        +    and   <ast.Module object at 0x105fb8c40> = <trisolaris.core.program_representation.ProgramAST object at 0x105fb06d0>.ast_tree

tests/test_crossover_integrity.py:17: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  trisolaris.core.program_representation:program_representation.py:305 Invalid offspring produced. Child 1 error: None, Child 2 error: 'Module' object has no attribute 'args'
_________________________ test_crossover_success_rate __________________________

    def test_crossover_success_rate():
        """Test crossover success rate with multiple parent pairs."""
        num_pairs = 20
        successful_crossovers = 0
    
        for _ in range(num_pairs):
            # Create parents with some mutation for diversity
            p1 = ProgramAST()
            p2 = ProgramAST()
            p1 = p1.mutate(mutation_rate=0.3)
            p2 = p2.mutate(mutation_rate=0.3)
    
            try:
                c1, c2 = ProgramAST.crossover(p1, p2)
    
                # Validate both children
                if (validate_ast(c1.ast_tree)[0] and
                    validate_ast(c2.ast_tree)[0] and
                    ast.dump(c1.ast_tree) != ast.dump(p1.ast_tree) and
                    ast.dump(c1.ast_tree) != ast.dump(p2.ast_tree) and
                    ast.dump(c2.ast_tree) != ast.dump(p1.ast_tree) and
                    ast.dump(c2.ast_tree) != ast.dump(p2.ast_tree)):
                    successful_crossovers += 1
            except Exception:
                continue
    
        success_rate = successful_crossovers / num_pairs
>       assert success_rate >= 0.95, f"Crossover success rate {success_rate:.2%} below 95% threshold"
E       AssertionError: Crossover success rate 30.00% below 95% threshold
E       assert 0.3 >= 0.95

tests/test_crossover_integrity.py:49: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  trisolaris.core.program_representation:program_representation.py:305 Invalid offspring produced. Child 1 error: invalid syntax (<string>, line 2), Child 2 error: None
WARNING  trisolaris.core.program_representation:program_representation.py:305 Invalid offspring produced. Child 1 error: None, Child 2 error: 'Module' object has no attribute 'args'
WARNING  trisolaris.core.program_representation:program_representation.py:305 Invalid offspring produced. Child 1 error: invalid syntax (<string>, line 10), Child 2 error: None
WARNING  trisolaris.core.program_representation:program_representation.py:305 Invalid offspring produced. Child 1 error: invalid syntax (<string>, line 11), Child 2 error: None
WARNING  trisolaris.core.program_representation:program_representation.py:305 Invalid offspring produced. Child 1 error: cannot assign to function call (<string>, line 6), Child 2 error: None
WARNING  trisolaris.core.program_representation:program_representation.py:305 Invalid offspring produced. Child 1 error: None, Child 2 error: invalid syntax (<string>, line 6)
WARNING  trisolaris.core.program_representation:program_representation.py:305 Invalid offspring produced. Child 1 error: invalid syntax (<string>, line 7), Child 2 error: None
WARNING  trisolaris.core.program_representation:program_representation.py:305 Invalid offspring produced. Child 1 error: invalid syntax (<string>, line 7), Child 2 error: None
WARNING  trisolaris.core.program_representation:program_representation.py:305 Invalid offspring produced. Child 1 error: None, Child 2 error: 'Module' object has no attribute 'arg'
WARNING  trisolaris.core.program_representation:program_representation.py:305 Invalid offspring produced. Child 1 error: invalid syntax (<string>, line 6), Child 2 error: None
WARNING  trisolaris.core.program_representation:program_representation.py:305 Invalid offspring produced. Child 1 error: None, Child 2 error: invalid syntax (<string>, line 7)
WARNING  trisolaris.core.program_representation:program_representation.py:305 Invalid offspring produced. Child 1 error: invalid syntax (<string>, line 8), Child 2 error: 'Module' object has no attribute 'args'
WARNING  trisolaris.core.program_representation:program_representation.py:305 Invalid offspring produced. Child 1 error: None, Child 2 error: 'return' outside function (<string>, line 1)
WARNING  trisolaris.core.program_representation:program_representation.py:305 Invalid offspring produced. Child 1 error: invalid syntax (<string>, line 8), Child 2 error: invalid syntax (<string>, line 9)
_____________________________ test_point_mutation ______________________________

    def test_point_mutation():
        """Test that point mutations produce valid programs."""
        program = ProgramAST()
        original_source = program.to_source()
    
        # Test multiple mutations
        for _ in range(10):
            mutated = program.mutate(mutation_rate=1.0)  # Force mutation
            is_valid, error = validate_ast(mutated.ast_tree)
            assert is_valid, f"Invalid AST after point mutation: {error}"
>           assert mutated.to_source() != original_source, "Mutation did not change the program"
E           AssertionError: Mutation did not change the program
E           assert "import os\nimport re\n\n\ndef sort_files(file_list):\n    result = {}\n    for filename in file_list:\n        conten...n(os.path(filename))\n        category = 'unknown'\n        result.update({'filename': category})\n    return result\n" != "import os\nimport re\n\n\ndef sort_files(file_list):\n    result = {}\n    for filename in file_list:\n        conten...n(os.path(filename))\n        category = 'unknown'\n        result.update({'filename': category})\n    return result\n"
E            +  where "import os\nimport re\n\n\ndef sort_files(file_list):\n    result = {}\n    for filename in file_list:\n        conten...n(os.path(filename))\n        category = 'unknown'\n        result.update({'filename': category})\n    return result\n" = to_source()
E            +    where to_source = <trisolaris.core.program_representation.ProgramAST object at 0x105e8eac0>.to_source

tests/test_mutation_integrity.py:22: AssertionError
____________________________ test_subtree_mutation _____________________________

    def test_subtree_mutation():
        """Test that subtree mutations produce valid programs."""
        program = ProgramAST()
        original_source = program.to_source()
    
        # Test multiple mutations
        for _ in range(10):
            mutated = program.mutate(mutation_rate=1.0)  # Force mutation
            is_valid, error = validate_ast(mutated.ast_tree)
            assert is_valid, f"Invalid AST after subtree mutation: {error}"
>           assert mutated.to_source() != original_source, "Mutation did not change the program"
E           AssertionError: Mutation did not change the program
E           assert "import os\nimport re\n\n\ndef sort_files(file_list):\n    result = {}\n    for filename in file_list:\n        conten...n(os.path(filename))\n        category = 'unknown'\n        result.update({'filename': category})\n    return result\n" != "import os\nimport re\n\n\ndef sort_files(file_list):\n    result = {}\n    for filename in file_list:\n        conten...n(os.path(filename))\n        category = 'unknown'\n        result.update({'filename': category})\n    return result\n"
E            +  where "import os\nimport re\n\n\ndef sort_files(file_list):\n    result = {}\n    for filename in file_list:\n        conten...n(os.path(filename))\n        category = 'unknown'\n        result.update({'filename': category})\n    return result\n" = to_source()
E            +    where to_source = <trisolaris.core.program_representation.ProgramAST object at 0x105f5de20>.to_source

tests/test_mutation_integrity.py:34: AssertionError
___________________________ test_functional_mutation ___________________________

    def test_functional_mutation():
        """Test that functional mutations produce valid programs."""
        program = ProgramAST()
        original_source = program.to_source()
    
        # Test multiple mutations
        for _ in range(10):
            mutated = program.mutate(mutation_rate=1.0)  # Force mutation
            is_valid, error = validate_ast(mutated.ast_tree)
            assert is_valid, f"Invalid AST after functional mutation: {error}"
>           assert mutated.to_source() != original_source, "Mutation did not change the program"
E           AssertionError: Mutation did not change the program
E           assert "import os\nimport re\n\n\ndef sort_files(file_list):\n    result = {}\n    for filename in file_list:\n        conten...n(os.path(filename))\n        category = 'unknown'\n        result.update({'filename': category})\n    return result\n" != "import os\nimport re\n\n\ndef sort_files(file_list):\n    result = {}\n    for filename in file_list:\n        conten...n(os.path(filename))\n        category = 'unknown'\n        result.update({'filename': category})\n    return result\n"
E            +  where "import os\nimport re\n\n\ndef sort_files(file_list):\n    result = {}\n    for filename in file_list:\n        conten...n(os.path(filename))\n        category = 'unknown'\n        result.update({'filename': category})\n    return result\n" = to_source()
E            +    where to_source = <trisolaris.core.program_representation.ProgramAST object at 0x105f6b550>.to_source

tests/test_mutation_integrity.py:46: AssertionError
______________________________ test_mutation_rate ______________________________

    def test_mutation_rate():
        """Test that mutation rate controls mutation frequency."""
        program = ProgramAST()
        original_source = program.to_source()
    
        # Test with zero mutation rate
        mutated = program.mutate(mutation_rate=0.0)
        assert mutated.to_source() == original_source, "Program changed with zero mutation rate"
    
        # Test with high mutation rate
        mutated = program.mutate(mutation_rate=1.0)
>       assert mutated.to_source() != original_source, "Program did not change with high mutation rate"
E       AssertionError: Program did not change with high mutation rate
E       assert "import os\nimport re\n\n\ndef sort_files(file_list):\n    result = {}\n    for filename in file_list:\n        conten...n(os.path(filename))\n        category = 'unknown'\n        result.update({'filename': category})\n    return result\n" != "import os\nimport re\n\n\ndef sort_files(file_list):\n    result = {}\n    for filename in file_list:\n        conten...n(os.path(filename))\n        category = 'unknown'\n        result.update({'filename': category})\n    return result\n"
E        +  where "import os\nimport re\n\n\ndef sort_files(file_list):\n    result = {}\n    for filename in file_list:\n        conten...n(os.path(filename))\n        category = 'unknown'\n        result.update({'filename': category})\n    return result\n" = to_source()
E        +    where to_source = <trisolaris.core.program_representation.ProgramAST object at 0x105e8e820>.to_source

tests/test_mutation_integrity.py:77: AssertionError
=========================== short test summary info ============================
FAILED tests/test_crossover_integrity.py::test_crossover_basic - AssertionErr...
FAILED tests/test_crossover_integrity.py::test_crossover_success_rate - Asser...
FAILED tests/test_mutation_integrity.py::test_point_mutation - AssertionError...
FAILED tests/test_mutation_integrity.py::test_subtree_mutation - AssertionErr...
FAILED tests/test_mutation_integrity.py::test_functional_mutation - Assertion...
FAILED tests/test_mutation_integrity.py::test_mutation_rate - AssertionError:...
========================= 6 failed, 9 passed in 0.19s ==========================
